#!/bin/bash
#
# Wrapper to make it easier to run cdist

# required for inventory option
export CDIST_BETA=1

usage() {
   echo "runcdist [options] <hosts|tags>"
   echo
   echo "See documentation for settings to an optional $CFG config file."
   echo
   echo "  <hosts>            Name of host or hosts to run cdist on"
   echo "  <tags>             Name of tag or tags to select hosts to run cdist on"
   echo "  -c <.cdistrc>      Source the <.cdistrc> file, set to ${main[cdistrc]}"
   echo "  -m                 Mail result (mail address must be configured in config)."
   echo "  -v                 Run verbose (more increases verbosity, default warning and error)"
   echo "  -q                 Quiet (disable warning and error messages)"
   echo "  -p                 Run in parrallel (set to ${main[parrallel]})"
   echo "  -P                 Timestamp log messages with the current local date and time in the format: YYYYMMDDHHMMSS.us"
   echo "  -o <manifest>      Overrule default manifest with specific manifest"
   echo "  -t                 All non option arguments are tags. Runs against all hosts having all tags"
   echo "  -T                 All non option arguments are tags. Runs against all hosts having any tags"
   echo "  -l                 When no tags are specified, list all available tags. When tags are present, list all hosts having all tags"
   echo "  -L                 When no tags are specified, list all available tags. When tags are present, list all hosts having any tags"
   echo "  -a                 Run cdist on all hosts in inventory"
   echo "  -d                 Dry run, don't execute types (will run manifests)"
   echo "  -x                 Run in debug mode"
   exit 1
}

readconfig() {
   declare -g -A "main[parrallel]=$(nproc)"
   main[cdistrc]=~/.cdistrc

   test ! -e $CFG && return
   while IFS='= ' read var val; do
      if [[ $var == \[*] ]]; then
          section=${var:1:-1}
      elif [[ $val ]]; then
          declare -g -A "$section[$var]=$val"
      fi
   done < <(grep -v "^#" $CFG)
   test "${#prerun[*]}" -gt 0 && mapfile -d '' prerunindex < <(printf '%s\0' "${!prerun[@]}" | sort -z)
   test "${#postrun[*]}" -gt 0 && mapfile -d '' postrunindex < <(printf '%s\0' "${!postrun[@]}" | sort -z)
}

main() {
   CFG=~/.runcdist.ini
   CDISTARGS=( "$0" "$@" )
   export CDISTDEBUG=0
   verbose=0
   mail=0

   readconfig

   options=( "--remote-copy" "scp -q" "--remote-exec" "ssh -x -oPermitLocalCommand=no -oClearAllForwardings=yes -oRemoteCommand=none -oRequestTTY=no -q -oForwardAgent=no" )

   while getopts :hmvqpPtTo:dalLxc: opt; do
      case $opt in
      h) usage
      ;;
      v) options+=( "-v" ); verbose=$(( verbose + 1 ))
      ;;
      q) options+=( "-q" )
      ;;
      p) options+=( "-p" "${main[parrallel]}" )
      ;;
      P) options+=( "-P" )
      ;;
      d) options+=( "-n" )
      ;;
      t) tag="-a -t"
      ;;
      T) tag="-t"
      ;;
      o) CONFIGTYPE="$OPTARG"
      ;;
      m) test "${main[mail]}" != "" && mail=1 || { echo "Mail address is not specified in config."; usage; }
      ;;
      a) all="-A"
      ;;
      c) main[cdistrc]="$OPTARG"
      ;;
      l) list="all"
      ;;
      L) list="any"
      ;;
      x) CDISTDEBUG=1
         options+=( "-S" )
      ;;
      \?) echo "Unknown option: -$OPTARG"
          usage
      ;;
      :) echo "Option -$OPTARG requires argument"
         usage
      ;;
      esac
   done
   shift $((OPTIND-1))
   items=( "$@" )

   test ! -z "${main[cdistrc]}" -a ! -f "${main[cdistrc]}" && { echo "No such file: ${main[cdistrc]}"; usage; }
   test -f "${main[cdistrc]}" && . "${main[cdistrc]}"

   if test "$list" != ""; then
      if test "${#items[*]}" -eq 0; then
         cdist inventory list | sed -n "s/.* //; s/,/\n/gp" | sort -u
         exit
      fi
      arg=("-a")
      test "$list" = "any" && arg=()
      cdist inventory list "${arg[@]}" -H -t "${items[@]}"
      exit
   fi

   test "${#items[*]}" -eq 0 -a "$all" = "" && { echo "Either require all or inventory tag or hosts."; usage; }
   test "${#items[*]}" -gt 0 -a "$all" != "" && { echo "Can't choose all and specific hosts or inventory tags."; usage; }
   test "$tag" != "" -a "$all" != "" && { echo "Can't choose all and specific inventory tags"; usage; }
   test "$tag" != "" -a "${#items[@]}" -eq 0 && { echo "Can't choose tags and not specify them."; usage; }

   if test "$tag" != ""; then
      test "$(cdist inventory list -H $tag "${items[@]}")" = "" && {
         echo "No hosts match specified tags."; exit 1; }
      mapfile -t alltags < <( cdist inventory list | sed -n "s/.* //; s/,/\n/g;p" | sort -u )
      ok=1
      for item in "${items[@]}"; do
         [[ ! " ${alltags[*]} " == *" ${item} "* ]] && { echo "Tag $item not found."; ok=0; }
      done
      test "$ok" -ne 1 && exit 1
   fi
   test "$mail" -eq 1 && { 
      mailfile=$(mktemp)
      exec 5>&1 &> "$mailfile"
   }
   for step in "${prerunindex[@]}"; do
      test "$verbose" -gt 0 && echo "Running \"${prerun[$step]}\""
      out=$( eval "${prerun[$step]}" 2>&1 )
      ret="$?"
      test "$ret" -ne 0 && echo "\"${prerun[$step]}\" returned $ret with output: $out"
   done
   CDISTACTION="$CONFIGTYPE" cdist config -c "$CDIST_CONFIG_DIR" "${options[@]}" $all $tag "${items[@]}" 2>&1
   CDISTRET="$?"
   for step in "${postrunindex[@]}"; do
      test "$verbose" -gt 0 && echo "Running \"${postrun[$step]}\""
      out=$( eval "${postrun[$step]}" 2>&1 )
      ret="$?"
      test "$ret" -ne 0 && echo "\"${postrun[$step]}\" returned $ret with output: $out"
   done
   test "$mail" -eq 1 && {
      exec 1>&5
      if test "$CDISTRET" -eq 0; then
         subject="Runcdist output (ok)"
         echo "Runcdist returned no errors." > "$mailfile"
      else
         readarray hosts < <(sed -n "/^ERROR:.*Failed to configure the following hosts:/ {s/^ERROR.*: \(.*\)$/\1/; s/ /\n/g;p}" "$mailfile")
         subject="Runcdist output (${#hosts[@]} hosts failed)"
         echo -e "Hosts that failed:\n$(printf "* %s\n" ${hosts[@]})\n\n$(cat "$mailfile")" > "$mailfile"
      fi

      mail -s "$subject" ${main[mail]} < "$mailfile"
      rm -f "$mailfile"
   }
   return $CDISTRET
}

main "$@"
